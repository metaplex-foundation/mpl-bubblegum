name: Create release

on:
  workflow_call:
    inputs:
      program:
        description: Program
        required: true
        default: bubblegum
        type: string
      type:
        description: Type of release
        required: true
        default: solana
        type: string
      bump:
        description: Version bump (patch, minor, major)
        required: true
        default: patch
        type: string
      git_ref:
        description: Commit hash or branch to create release
        required: false
        type: string

env:
  CACHE: true

jobs:
  build_programs:
    name: Programs
    uses: ./.github/workflows/build-programs.yml
    secrets: inherit
    with:
      git_ref: ${{ inputs.git_ref }}

  test_programs:
    name: Programs
    uses: ./.github/workflows/test-programs.yml
    secrets: inherit
    with:
      program_matrix: '["${{ inputs.program }}"]'
      git_ref: ${{ inputs.git_ref }}

  test_js:
    name: JS client
    needs: build_programs
    uses: ./.github/workflows/test-js-client.yml
    secrets: inherit
    with:
      git_ref: ${{ inputs.git_ref }}
  
  test_rust:
    name: Rust client
    needs: build_programs
    uses: ./.github/workflows/test-rust-client.yml
    secrets: inherit
    with:
      git_ref: ${{ inputs.git_ref }}
  
  create_release:
    name: Create program release
    runs-on: ubuntu-latest
    needs: [test_js, test_rust, test_programs]
    permissions:
      contents: write
    steps:  
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.git_ref }}
    - name: Bump Program Version
      run: |
        git fetch --tags --all
        
        if [ "${{ inputs.type }}" == "solana" ]; then
          TAG_NAME="release/${{ inputs.program }}"
        elif [ "${{ inputs.type }}" == "svm" ]; then  
          TAG_NAME="release/${{ inputs.program }}-svm"
        elif [ "${{ inputs.type }}" == "commit" ]; then
          COMMIT_SHORTENED=`echo ${{ inputs.git_ref }} | cut -c1-7`
          TAG_NAME="release/${{ inputs.program }}-${COMMIT_SHORTENED}"
        else
          echo "Invalid type: ${{ inputs.type }}"
          exit 1
        fi
        VERSION=`git tag | grep '^release/${{ inputs.program }}' | sort -t@ -k2 -V | tail -n1 | cut -d@ -f2`
        MAJOR=`echo ${VERSION} | cut -d. -f1`
        MINOR=`echo ${VERSION} | cut -d. -f2`
        PATCH=`echo ${VERSION} | cut -d. -f3`
        
        if [ "${{ inputs.bump }}" == "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
        elif [ "${{ inputs.bump }}" == "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
        else
            PATCH=$((PATCH + 1))
        fi
        
        PROGRAM_VERSION="${MAJOR}.${MINOR}.${PATCH}"

        echo PROGRAM_VERSION="${PROGRAM_VERSION}" >> $GITHUB_ENV
        echo TAG_NAME="${TAG_NAME}" >> $GITHUB_ENV
        echo COMMIT_SHORTENED="${COMMIT_SHORTENED}" >> $GITHUB_ENV

    - name: Sanitize Ref
      id: sanitize
      shell: bash
      run: |
        REF="${{ inputs.git_ref }}"
        if [ -z "$REF" ]; then
          REF="default"
        fi
        SANITIZED=${REF//\//-}
        echo "sanitized=$SANITIZED" >> "$GITHUB_OUTPUT"

    - name: Download Program Builds
      uses: actions/download-artifact@v4
      with:
        name: program-builds-${{ steps.sanitize.outputs.sanitized }}
    
    - name: Identify Program
      run: |
        echo PROGRAM_NAME="${{ inputs.program }}" >> $GITHUB_ENV

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.TAG_NAME }}@${{ env.PROGRAM_VERSION }}
        release_name: ${{ env.TAG_NAME }}@${{ env.PROGRAM_VERSION }}
        body: |
          Release ${{ env.TAG_NAME }}@${{ env.PROGRAM_VERSION }}
        draft: false
        prerelease: false
  
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./programs/.bin/${{ env.PROGRAM_NAME }}.so
        asset_name: ${{ env.PROGRAM_NAME }}.so
        asset_content_type: application/octet-stream

    # - name: Update latest tag
    #   uses: actions/github-script@v5
    #   with:
    #     script: |
    #       github.rest.git.createRef({
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         ref: 'refs/tags/release/${{ inputs.program }}@latest',
    #         sha: '${{ github.sha }}'
    #       });