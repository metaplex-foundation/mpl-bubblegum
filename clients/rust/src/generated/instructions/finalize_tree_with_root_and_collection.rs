//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct FinalizeTreeWithRootAndCollection {
    pub tree_config: solana_program::pubkey::Pubkey,

    pub merkle_tree: solana_program::pubkey::Pubkey,

    pub payer: solana_program::pubkey::Pubkey,

    pub tree_creator_or_delegate: solana_program::pubkey::Pubkey,

    pub staker: solana_program::pubkey::Pubkey,

    pub collection_authority: solana_program::pubkey::Pubkey,

    pub registrar: solana_program::pubkey::Pubkey,

    pub voter: solana_program::pubkey::Pubkey,

    pub mining: solana_program::pubkey::Pubkey,

    pub fee_receiver: solana_program::pubkey::Pubkey,
    /// If there is no collecton authority record PDA then
    /// this must be the Bubblegum program address.
    pub collection_authority_record_pda: Option<solana_program::pubkey::Pubkey>,

    pub collection_mint: solana_program::pubkey::Pubkey,

    pub collection_metadata: solana_program::pubkey::Pubkey,

    pub collection_edition: solana_program::pubkey::Pubkey,

    pub log_wrapper: solana_program::pubkey::Pubkey,

    pub compression_program: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,
}

impl FinalizeTreeWithRootAndCollection {
    pub fn instruction(
        &self,
        args: FinalizeTreeWithRootAndCollectionInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: FinalizeTreeWithRootAndCollectionInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(17 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.tree_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.merkle_tree,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.tree_creator_or_delegate,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.staker,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.collection_authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.registrar,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.voter, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mining,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_receiver,
            false,
        ));
        if let Some(collection_authority_record_pda) = self.collection_authority_record_pda {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                collection_authority_record_pda,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::MPL_BUBBLEGUM_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.collection_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.collection_metadata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.collection_edition,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.log_wrapper,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.compression_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = FinalizeTreeWithRootAndCollectionInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::MPL_BUBBLEGUM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
struct FinalizeTreeWithRootAndCollectionInstructionData {
    discriminator: [u8; 8],
}

impl FinalizeTreeWithRootAndCollectionInstructionData {
    fn new() -> Self {
        Self {
            discriminator: [194, 98, 45, 168, 183, 72, 67, 155],
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct FinalizeTreeWithRootAndCollectionInstructionArgs {
    pub root: [u8; 32],
    pub rightmost_leaf: [u8; 32],
    pub rightmost_index: u32,
    pub metadata_url: String,
    pub metadata_hash: String,
}

/// Instruction builder.
#[derive(Default)]
pub struct FinalizeTreeWithRootAndCollectionBuilder {
    tree_config: Option<solana_program::pubkey::Pubkey>,
    merkle_tree: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    tree_creator_or_delegate: Option<solana_program::pubkey::Pubkey>,
    staker: Option<solana_program::pubkey::Pubkey>,
    collection_authority: Option<solana_program::pubkey::Pubkey>,
    registrar: Option<solana_program::pubkey::Pubkey>,
    voter: Option<solana_program::pubkey::Pubkey>,
    mining: Option<solana_program::pubkey::Pubkey>,
    fee_receiver: Option<solana_program::pubkey::Pubkey>,
    collection_authority_record_pda: Option<solana_program::pubkey::Pubkey>,
    collection_mint: Option<solana_program::pubkey::Pubkey>,
    collection_metadata: Option<solana_program::pubkey::Pubkey>,
    collection_edition: Option<solana_program::pubkey::Pubkey>,
    log_wrapper: Option<solana_program::pubkey::Pubkey>,
    compression_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    root: Option<[u8; 32]>,
    rightmost_leaf: Option<[u8; 32]>,
    rightmost_index: Option<u32>,
    metadata_url: Option<String>,
    metadata_hash: Option<String>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl FinalizeTreeWithRootAndCollectionBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn tree_config(&mut self, tree_config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.tree_config = Some(tree_config);
        self
    }
    #[inline(always)]
    pub fn merkle_tree(&mut self, merkle_tree: solana_program::pubkey::Pubkey) -> &mut Self {
        self.merkle_tree = Some(merkle_tree);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn tree_creator_or_delegate(
        &mut self,
        tree_creator_or_delegate: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.tree_creator_or_delegate = Some(tree_creator_or_delegate);
        self
    }
    #[inline(always)]
    pub fn staker(&mut self, staker: solana_program::pubkey::Pubkey) -> &mut Self {
        self.staker = Some(staker);
        self
    }
    #[inline(always)]
    pub fn collection_authority(
        &mut self,
        collection_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.collection_authority = Some(collection_authority);
        self
    }
    #[inline(always)]
    pub fn registrar(&mut self, registrar: solana_program::pubkey::Pubkey) -> &mut Self {
        self.registrar = Some(registrar);
        self
    }
    #[inline(always)]
    pub fn voter(&mut self, voter: solana_program::pubkey::Pubkey) -> &mut Self {
        self.voter = Some(voter);
        self
    }
    #[inline(always)]
    pub fn mining(&mut self, mining: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mining = Some(mining);
        self
    }
    #[inline(always)]
    pub fn fee_receiver(&mut self, fee_receiver: solana_program::pubkey::Pubkey) -> &mut Self {
        self.fee_receiver = Some(fee_receiver);
        self
    }
    /// `[optional account]`
    /// If there is no collecton authority record PDA then
    /// this must be the Bubblegum program address.
    #[inline(always)]
    pub fn collection_authority_record_pda(
        &mut self,
        collection_authority_record_pda: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.collection_authority_record_pda = collection_authority_record_pda;
        self
    }
    #[inline(always)]
    pub fn collection_mint(
        &mut self,
        collection_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.collection_mint = Some(collection_mint);
        self
    }
    #[inline(always)]
    pub fn collection_metadata(
        &mut self,
        collection_metadata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.collection_metadata = Some(collection_metadata);
        self
    }
    #[inline(always)]
    pub fn collection_edition(
        &mut self,
        collection_edition: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.collection_edition = Some(collection_edition);
        self
    }
    /// `[optional account, default to 'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV']`
    #[inline(always)]
    pub fn log_wrapper(&mut self, log_wrapper: solana_program::pubkey::Pubkey) -> &mut Self {
        self.log_wrapper = Some(log_wrapper);
        self
    }
    /// `[optional account, default to 'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK']`
    #[inline(always)]
    pub fn compression_program(
        &mut self,
        compression_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.compression_program = Some(compression_program);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn root(&mut self, root: [u8; 32]) -> &mut Self {
        self.root = Some(root);
        self
    }
    #[inline(always)]
    pub fn rightmost_leaf(&mut self, rightmost_leaf: [u8; 32]) -> &mut Self {
        self.rightmost_leaf = Some(rightmost_leaf);
        self
    }
    #[inline(always)]
    pub fn rightmost_index(&mut self, rightmost_index: u32) -> &mut Self {
        self.rightmost_index = Some(rightmost_index);
        self
    }
    #[inline(always)]
    pub fn metadata_url(&mut self, metadata_url: String) -> &mut Self {
        self.metadata_url = Some(metadata_url);
        self
    }
    #[inline(always)]
    pub fn metadata_hash(&mut self, metadata_hash: String) -> &mut Self {
        self.metadata_hash = Some(metadata_hash);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = FinalizeTreeWithRootAndCollection {
            tree_config: self.tree_config.expect("tree_config is not set"),
            merkle_tree: self.merkle_tree.expect("merkle_tree is not set"),
            payer: self.payer.expect("payer is not set"),
            tree_creator_or_delegate: self
                .tree_creator_or_delegate
                .expect("tree_creator_or_delegate is not set"),
            staker: self.staker.expect("staker is not set"),
            collection_authority: self
                .collection_authority
                .expect("collection_authority is not set"),
            registrar: self.registrar.expect("registrar is not set"),
            voter: self.voter.expect("voter is not set"),
            mining: self.mining.expect("mining is not set"),
            fee_receiver: self.fee_receiver.expect("fee_receiver is not set"),
            collection_authority_record_pda: self.collection_authority_record_pda,
            collection_mint: self.collection_mint.expect("collection_mint is not set"),
            collection_metadata: self
                .collection_metadata
                .expect("collection_metadata is not set"),
            collection_edition: self
                .collection_edition
                .expect("collection_edition is not set"),
            log_wrapper: self.log_wrapper.unwrap_or(solana_program::pubkey!(
                "noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV"
            )),
            compression_program: self.compression_program.unwrap_or(solana_program::pubkey!(
                "cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK"
            )),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };
        let args = FinalizeTreeWithRootAndCollectionInstructionArgs {
            root: self.root.clone().expect("root is not set"),
            rightmost_leaf: self
                .rightmost_leaf
                .clone()
                .expect("rightmost_leaf is not set"),
            rightmost_index: self
                .rightmost_index
                .clone()
                .expect("rightmost_index is not set"),
            metadata_url: self.metadata_url.clone().expect("metadata_url is not set"),
            metadata_hash: self
                .metadata_hash
                .clone()
                .expect("metadata_hash is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `finalize_tree_with_root_and_collection` CPI accounts.
pub struct FinalizeTreeWithRootAndCollectionCpiAccounts<'a, 'b> {
    pub tree_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub merkle_tree: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub tree_creator_or_delegate: &'b solana_program::account_info::AccountInfo<'a>,

    pub staker: &'b solana_program::account_info::AccountInfo<'a>,

    pub collection_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub registrar: &'b solana_program::account_info::AccountInfo<'a>,

    pub voter: &'b solana_program::account_info::AccountInfo<'a>,

    pub mining: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_receiver: &'b solana_program::account_info::AccountInfo<'a>,
    /// If there is no collecton authority record PDA then
    /// this must be the Bubblegum program address.
    pub collection_authority_record_pda: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub collection_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub collection_metadata: &'b solana_program::account_info::AccountInfo<'a>,

    pub collection_edition: &'b solana_program::account_info::AccountInfo<'a>,

    pub log_wrapper: &'b solana_program::account_info::AccountInfo<'a>,

    pub compression_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `finalize_tree_with_root_and_collection` CPI instruction.
pub struct FinalizeTreeWithRootAndCollectionCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub tree_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub merkle_tree: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub tree_creator_or_delegate: &'b solana_program::account_info::AccountInfo<'a>,

    pub staker: &'b solana_program::account_info::AccountInfo<'a>,

    pub collection_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub registrar: &'b solana_program::account_info::AccountInfo<'a>,

    pub voter: &'b solana_program::account_info::AccountInfo<'a>,

    pub mining: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_receiver: &'b solana_program::account_info::AccountInfo<'a>,
    /// If there is no collecton authority record PDA then
    /// this must be the Bubblegum program address.
    pub collection_authority_record_pda: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub collection_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub collection_metadata: &'b solana_program::account_info::AccountInfo<'a>,

    pub collection_edition: &'b solana_program::account_info::AccountInfo<'a>,

    pub log_wrapper: &'b solana_program::account_info::AccountInfo<'a>,

    pub compression_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: FinalizeTreeWithRootAndCollectionInstructionArgs,
}

impl<'a, 'b> FinalizeTreeWithRootAndCollectionCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: FinalizeTreeWithRootAndCollectionCpiAccounts<'a, 'b>,
        args: FinalizeTreeWithRootAndCollectionInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            tree_config: accounts.tree_config,
            merkle_tree: accounts.merkle_tree,
            payer: accounts.payer,
            tree_creator_or_delegate: accounts.tree_creator_or_delegate,
            staker: accounts.staker,
            collection_authority: accounts.collection_authority,
            registrar: accounts.registrar,
            voter: accounts.voter,
            mining: accounts.mining,
            fee_receiver: accounts.fee_receiver,
            collection_authority_record_pda: accounts.collection_authority_record_pda,
            collection_mint: accounts.collection_mint,
            collection_metadata: accounts.collection_metadata,
            collection_edition: accounts.collection_edition,
            log_wrapper: accounts.log_wrapper,
            compression_program: accounts.compression_program,
            system_program: accounts.system_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(17 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.tree_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.merkle_tree.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.tree_creator_or_delegate.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.staker.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.collection_authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.registrar.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.voter.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mining.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_receiver.key,
            false,
        ));
        if let Some(collection_authority_record_pda) = self.collection_authority_record_pda {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *collection_authority_record_pda.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::MPL_BUBBLEGUM_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.collection_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.collection_metadata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.collection_edition.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.log_wrapper.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.compression_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = FinalizeTreeWithRootAndCollectionInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MPL_BUBBLEGUM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(17 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.tree_config.clone());
        account_infos.push(self.merkle_tree.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.tree_creator_or_delegate.clone());
        account_infos.push(self.staker.clone());
        account_infos.push(self.collection_authority.clone());
        account_infos.push(self.registrar.clone());
        account_infos.push(self.voter.clone());
        account_infos.push(self.mining.clone());
        account_infos.push(self.fee_receiver.clone());
        if let Some(collection_authority_record_pda) = self.collection_authority_record_pda {
            account_infos.push(collection_authority_record_pda.clone());
        }
        account_infos.push(self.collection_mint.clone());
        account_infos.push(self.collection_metadata.clone());
        account_infos.push(self.collection_edition.clone());
        account_infos.push(self.log_wrapper.clone());
        account_infos.push(self.compression_program.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// `finalize_tree_with_root_and_collection` CPI instruction builder.
pub struct FinalizeTreeWithRootAndCollectionCpiBuilder<'a, 'b> {
    instruction: Box<FinalizeTreeWithRootAndCollectionCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> FinalizeTreeWithRootAndCollectionCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(FinalizeTreeWithRootAndCollectionCpiBuilderInstruction {
            __program: program,
            tree_config: None,
            merkle_tree: None,
            payer: None,
            tree_creator_or_delegate: None,
            staker: None,
            collection_authority: None,
            registrar: None,
            voter: None,
            mining: None,
            fee_receiver: None,
            collection_authority_record_pda: None,
            collection_mint: None,
            collection_metadata: None,
            collection_edition: None,
            log_wrapper: None,
            compression_program: None,
            system_program: None,
            root: None,
            rightmost_leaf: None,
            rightmost_index: None,
            metadata_url: None,
            metadata_hash: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn tree_config(
        &mut self,
        tree_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tree_config = Some(tree_config);
        self
    }
    #[inline(always)]
    pub fn merkle_tree(
        &mut self,
        merkle_tree: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.merkle_tree = Some(merkle_tree);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn tree_creator_or_delegate(
        &mut self,
        tree_creator_or_delegate: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tree_creator_or_delegate = Some(tree_creator_or_delegate);
        self
    }
    #[inline(always)]
    pub fn staker(
        &mut self,
        staker: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.staker = Some(staker);
        self
    }
    #[inline(always)]
    pub fn collection_authority(
        &mut self,
        collection_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.collection_authority = Some(collection_authority);
        self
    }
    #[inline(always)]
    pub fn registrar(
        &mut self,
        registrar: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.registrar = Some(registrar);
        self
    }
    #[inline(always)]
    pub fn voter(&mut self, voter: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.voter = Some(voter);
        self
    }
    #[inline(always)]
    pub fn mining(
        &mut self,
        mining: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mining = Some(mining);
        self
    }
    #[inline(always)]
    pub fn fee_receiver(
        &mut self,
        fee_receiver: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_receiver = Some(fee_receiver);
        self
    }
    /// `[optional account]`
    /// If there is no collecton authority record PDA then
    /// this must be the Bubblegum program address.
    #[inline(always)]
    pub fn collection_authority_record_pda(
        &mut self,
        collection_authority_record_pda: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.collection_authority_record_pda = collection_authority_record_pda;
        self
    }
    #[inline(always)]
    pub fn collection_mint(
        &mut self,
        collection_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.collection_mint = Some(collection_mint);
        self
    }
    #[inline(always)]
    pub fn collection_metadata(
        &mut self,
        collection_metadata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.collection_metadata = Some(collection_metadata);
        self
    }
    #[inline(always)]
    pub fn collection_edition(
        &mut self,
        collection_edition: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.collection_edition = Some(collection_edition);
        self
    }
    #[inline(always)]
    pub fn log_wrapper(
        &mut self,
        log_wrapper: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.log_wrapper = Some(log_wrapper);
        self
    }
    #[inline(always)]
    pub fn compression_program(
        &mut self,
        compression_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.compression_program = Some(compression_program);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn root(&mut self, root: [u8; 32]) -> &mut Self {
        self.instruction.root = Some(root);
        self
    }
    #[inline(always)]
    pub fn rightmost_leaf(&mut self, rightmost_leaf: [u8; 32]) -> &mut Self {
        self.instruction.rightmost_leaf = Some(rightmost_leaf);
        self
    }
    #[inline(always)]
    pub fn rightmost_index(&mut self, rightmost_index: u32) -> &mut Self {
        self.instruction.rightmost_index = Some(rightmost_index);
        self
    }
    #[inline(always)]
    pub fn metadata_url(&mut self, metadata_url: String) -> &mut Self {
        self.instruction.metadata_url = Some(metadata_url);
        self
    }
    #[inline(always)]
    pub fn metadata_hash(&mut self, metadata_hash: String) -> &mut Self {
        self.instruction.metadata_hash = Some(metadata_hash);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = FinalizeTreeWithRootAndCollectionInstructionArgs {
            root: self.instruction.root.clone().expect("root is not set"),
            rightmost_leaf: self
                .instruction
                .rightmost_leaf
                .clone()
                .expect("rightmost_leaf is not set"),
            rightmost_index: self
                .instruction
                .rightmost_index
                .clone()
                .expect("rightmost_index is not set"),
            metadata_url: self
                .instruction
                .metadata_url
                .clone()
                .expect("metadata_url is not set"),
            metadata_hash: self
                .instruction
                .metadata_hash
                .clone()
                .expect("metadata_hash is not set"),
        };
        let instruction = FinalizeTreeWithRootAndCollectionCpi {
            __program: self.instruction.__program,

            tree_config: self
                .instruction
                .tree_config
                .expect("tree_config is not set"),

            merkle_tree: self
                .instruction
                .merkle_tree
                .expect("merkle_tree is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            tree_creator_or_delegate: self
                .instruction
                .tree_creator_or_delegate
                .expect("tree_creator_or_delegate is not set"),

            staker: self.instruction.staker.expect("staker is not set"),

            collection_authority: self
                .instruction
                .collection_authority
                .expect("collection_authority is not set"),

            registrar: self.instruction.registrar.expect("registrar is not set"),

            voter: self.instruction.voter.expect("voter is not set"),

            mining: self.instruction.mining.expect("mining is not set"),

            fee_receiver: self
                .instruction
                .fee_receiver
                .expect("fee_receiver is not set"),

            collection_authority_record_pda: self.instruction.collection_authority_record_pda,

            collection_mint: self
                .instruction
                .collection_mint
                .expect("collection_mint is not set"),

            collection_metadata: self
                .instruction
                .collection_metadata
                .expect("collection_metadata is not set"),

            collection_edition: self
                .instruction
                .collection_edition
                .expect("collection_edition is not set"),

            log_wrapper: self
                .instruction
                .log_wrapper
                .expect("log_wrapper is not set"),

            compression_program: self
                .instruction
                .compression_program
                .expect("compression_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct FinalizeTreeWithRootAndCollectionCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    tree_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    merkle_tree: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    tree_creator_or_delegate: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    staker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    collection_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    registrar: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    voter: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mining: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_receiver: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    collection_authority_record_pda: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    collection_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    collection_metadata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    collection_edition: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    log_wrapper: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    compression_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    root: Option<[u8; 32]>,
    rightmost_leaf: Option<[u8; 32]>,
    rightmost_index: Option<u32>,
    metadata_url: Option<String>,
    metadata_hash: Option<String>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
