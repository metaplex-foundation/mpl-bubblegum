//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use solana_program::pubkey::Pubkey;

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub enum ConcurrentMerkleTreeHeaderData {
    V1 {
        /// Buffer of changelogs stored on-chain.
        /// Must be a power of 2; see above table for valid combinations.
        max_buffer_size: u32,
        /// Depth of the SPL ConcurrentMerkleTree to store.
        /// Tree capacity can be calculated as power(2, max_depth).
        /// See above table for valid options.
        max_depth: u32,
        /// Authority that validates the content of the trees.
        /// Typically a program, e.g., the Bubblegum contract validates that leaves are valid NFTs.
        #[cfg_attr(
            feature = "serde",
            serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
        )]
        authority: Pubkey,
        /// Slot corresponding to when the Merkle tree was created.
        /// Provides a lower-bound on what slot to start (re-)building a tree from.
        creation_slot: u64,
        /// A flag indicating whether the tree has been initialized with a root.
        /// This field was added together with the `finalize_tree_with_root` instruction.
        /// It takes 1 byte of space taken from the previous padding for existing accounts.
        is_batch_initialized: bool,
        /// Needs padding for the account to be 8-byte aligned
        /// 8-byte alignment is necessary to zero-copy the SPL ConcurrentMerkleTree
        padding: [u8; 5],
    },
}
