/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type AppendInstructionAccounts = {
  merkleTree: PublicKey | Pda;
  /**
   * Authority that controls write-access to the tree
   * Typically a program, e.g., the Bubblegum contract validates that leaves are valid NFTs.
   */

  authority?: Signer;
  /** Program used to emit changelogs as cpi instruction data. */
  noop: PublicKey | Pda;
};

// Data.
export type AppendInstructionData = {
  discriminator: Array<number>;
  leaf: Uint8Array;
};

export type AppendInstructionDataArgs = { leaf: Uint8Array };

export function getAppendInstructionDataSerializer(): Serializer<
  AppendInstructionDataArgs,
  AppendInstructionData
> {
  return mapSerializer<AppendInstructionDataArgs, any, AppendInstructionData>(
    struct<AppendInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['leaf', bytes({ size: 32 })],
      ],
      { description: 'AppendInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [149, 120, 18, 222, 236, 225, 88, 203],
    })
  ) as Serializer<AppendInstructionDataArgs, AppendInstructionData>;
}

// Args.
export type AppendInstructionArgs = AppendInstructionDataArgs;

// Instruction.
export function append(
  context: Pick<Context, 'identity' | 'programs'>,
  input: AppendInstructionAccounts & AppendInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'splAccountCompression',
    'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK'
  );

  // Accounts.
  const resolvedAccounts: ResolvedAccountsWithIndices = {
    merkleTree: { index: 0, isWritable: true, value: input.merkleTree ?? null },
    authority: { index: 1, isWritable: false, value: input.authority ?? null },
    noop: { index: 2, isWritable: false, value: input.noop ?? null },
  };

  // Arguments.
  const resolvedArgs: AppendInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getAppendInstructionDataSerializer().serialize(
    resolvedArgs as AppendInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
