/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Option,
  OptionOrNullable,
  PublicKey,
  some,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bool,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  string,
  struct,
  u16,
} from '@metaplex-foundation/umi/serializers';
import {
  Creator,
  CreatorArgs,
  TokenStandard,
  TokenStandardArgs,
  getCreatorSerializer,
  getTokenStandardSerializer,
} from '.';

export type MetadataArgsV2 = {
  /** The name of the asset */
  name: string;
  /** The symbol for the asset */
  symbol: string;
  /** URI pointing to JSON representing the asset */
  uri: string;
  /** Royalty basis points that goes to creators in secondary sales (0-10000) */
  sellerFeeBasisPoints: number;
  /** Immutable, once flipped, all sales of this metadata are considered secondary. */
  primarySaleHappened: boolean;
  /** Whether or not the data struct is mutable, default is not */
  isMutable: boolean;
  /** Token standard.  Currently only `NonFungible` is allowed. */
  tokenStandard: Option<TokenStandard>;
  /** Creator array */
  creators: Array<Creator>;
  /** Collection.  Note in V2 its just a `Pubkey` and is always considered verified. */
  collection: Option<PublicKey>;
};

export type MetadataArgsV2Args = {
  /** The name of the asset */
  name: string;
  /** The symbol for the asset */
  symbol?: string;
  /** URI pointing to JSON representing the asset */
  uri: string;
  /** Royalty basis points that goes to creators in secondary sales (0-10000) */
  sellerFeeBasisPoints: number;
  /** Immutable, once flipped, all sales of this metadata are considered secondary. */
  primarySaleHappened?: boolean;
  /** Whether or not the data struct is mutable, default is not */
  isMutable?: boolean;
  /** Token standard.  Currently only `NonFungible` is allowed. */
  tokenStandard?: OptionOrNullable<TokenStandardArgs>;
  /** Creator array */
  creators: Array<CreatorArgs>;
  /** Collection.  Note in V2 its just a `Pubkey` and is always considered verified. */
  collection: OptionOrNullable<PublicKey>;
};

export function getMetadataArgsV2Serializer(): Serializer<
  MetadataArgsV2Args,
  MetadataArgsV2
> {
  return mapSerializer<MetadataArgsV2Args, any, MetadataArgsV2>(
    struct<MetadataArgsV2>(
      [
        ['name', string()],
        ['symbol', string()],
        ['uri', string()],
        ['sellerFeeBasisPoints', u16()],
        ['primarySaleHappened', bool()],
        ['isMutable', bool()],
        ['tokenStandard', option(getTokenStandardSerializer())],
        ['creators', array(getCreatorSerializer())],
        ['collection', option(publicKeySerializer())],
      ],
      { description: 'MetadataArgsV2' }
    ),
    (value) => ({
      ...value,
      symbol: value.symbol ?? '',
      primarySaleHappened: value.primarySaleHappened ?? false,
      isMutable: value.isMutable ?? true,
      tokenStandard: value.tokenStandard ?? some(TokenStandard.NonFungible),
    })
  ) as Serializer<MetadataArgsV2Args, MetadataArgsV2>;
}
