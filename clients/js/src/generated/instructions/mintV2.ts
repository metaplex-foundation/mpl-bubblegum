/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  none,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  option,
  struct,
  u32,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findTreeConfigPda } from '../accounts';
import {
  PickPartial,
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';
import {
  AssetDataSchema,
  AssetDataSchemaArgs,
  MetadataArgsV2,
  MetadataArgsV2Args,
  getAssetDataSchemaSerializer,
  getMetadataArgsV2Serializer,
} from '../types';

// Accounts.
export type MintV2InstructionAccounts = {
  treeConfig?: PublicKey | Pda;
  payer?: Signer;
  /** Optional tree delegate, defaults to `payer` */
  treeCreatorOrDelegate?: Signer;
  /** Optional collection authority, defaults to `tree_delegate` */
  collectionAuthority?: Signer;
  leafOwner: PublicKey | Pda;
  leafDelegate?: PublicKey | Pda;
  merkleTree: PublicKey | Pda;
  coreCollection?: PublicKey | Pda;
  mplCoreCpiSigner?: PublicKey | Pda;
  logWrapper?: PublicKey | Pda;
  compressionProgram?: PublicKey | Pda;
  mplCoreProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type MintV2InstructionData = {
  discriminator: Array<number>;
  metadata: MetadataArgsV2;
  assetData: Option<Uint8Array>;
  assetDataSchema: Option<AssetDataSchema>;
};

export type MintV2InstructionDataArgs = {
  metadata: MetadataArgsV2Args;
  assetData: OptionOrNullable<Uint8Array>;
  assetDataSchema: OptionOrNullable<AssetDataSchemaArgs>;
};

export function getMintV2InstructionDataSerializer(): Serializer<
  MintV2InstructionDataArgs,
  MintV2InstructionData
> {
  return mapSerializer<MintV2InstructionDataArgs, any, MintV2InstructionData>(
    struct<MintV2InstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['metadata', getMetadataArgsV2Serializer()],
        ['assetData', option(bytes({ size: u32() }))],
        ['assetDataSchema', option(getAssetDataSchemaSerializer())],
      ],
      { description: 'MintV2InstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [120, 121, 23, 146, 173, 110, 199, 205],
    })
  ) as Serializer<MintV2InstructionDataArgs, MintV2InstructionData>;
}

// Args.
export type MintV2InstructionArgs = PickPartial<
  MintV2InstructionDataArgs,
  'assetData' | 'assetDataSchema'
>;

// Instruction.
export function mintV2(
  context: Pick<Context, 'eddsa' | 'payer' | 'programs'>,
  input: MintV2InstructionAccounts & MintV2InstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplBubblegum',
    'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY'
  );

  // Accounts.
  const resolvedAccounts: ResolvedAccountsWithIndices = {
    treeConfig: { index: 0, isWritable: true, value: input.treeConfig ?? null },
    payer: { index: 1, isWritable: true, value: input.payer ?? null },
    treeCreatorOrDelegate: {
      index: 2,
      isWritable: false,
      value: input.treeCreatorOrDelegate ?? null,
    },
    collectionAuthority: {
      index: 3,
      isWritable: false,
      value: input.collectionAuthority ?? null,
    },
    leafOwner: { index: 4, isWritable: false, value: input.leafOwner ?? null },
    leafDelegate: {
      index: 5,
      isWritable: false,
      value: input.leafDelegate ?? null,
    },
    merkleTree: { index: 6, isWritable: true, value: input.merkleTree ?? null },
    coreCollection: {
      index: 7,
      isWritable: true,
      value: input.coreCollection ?? null,
    },
    mplCoreCpiSigner: {
      index: 8,
      isWritable: false,
      value: input.mplCoreCpiSigner ?? null,
    },
    logWrapper: {
      index: 9,
      isWritable: false,
      value: input.logWrapper ?? null,
    },
    compressionProgram: {
      index: 10,
      isWritable: false,
      value: input.compressionProgram ?? null,
    },
    mplCoreProgram: {
      index: 11,
      isWritable: false,
      value: input.mplCoreProgram ?? null,
    },
    systemProgram: {
      index: 12,
      isWritable: false,
      value: input.systemProgram ?? null,
    },
  };

  // Arguments.
  const resolvedArgs: MintV2InstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.treeConfig.value) {
    resolvedAccounts.treeConfig.value = findTreeConfigPda(context, {
      merkleTree: expectPublicKey(resolvedAccounts.merkleTree.value),
    });
  }
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.mplCoreCpiSigner.value) {
    if (resolvedAccounts.coreCollection.value) {
      resolvedAccounts.mplCoreCpiSigner.value = publicKey(
        'CbNY3JiXdXNE9tPNEk1aRZVEkWdj2v7kfJLNQwZZgpXk'
      );
    }
  }
  if (!resolvedAccounts.logWrapper.value) {
    resolvedAccounts.logWrapper.value = context.programs.getPublicKey(
      'mplNoop',
      'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3'
    );
    resolvedAccounts.logWrapper.isWritable = false;
  }
  if (!resolvedAccounts.compressionProgram.value) {
    resolvedAccounts.compressionProgram.value = context.programs.getPublicKey(
      'mplAccountCompression',
      'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW'
    );
    resolvedAccounts.compressionProgram.isWritable = false;
  }
  if (!resolvedAccounts.mplCoreProgram.value) {
    resolvedAccounts.mplCoreProgram.value = context.programs.getPublicKey(
      'mplCore',
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'
    );
    resolvedAccounts.mplCoreProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedArgs.assetData) {
    resolvedArgs.assetData = none();
  }
  if (!resolvedArgs.assetDataSchema) {
    resolvedArgs.assetDataSchema = none();
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getMintV2InstructionDataSerializer().serialize(
    resolvedArgs as MintV2InstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
