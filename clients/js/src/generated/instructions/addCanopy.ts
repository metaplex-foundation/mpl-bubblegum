/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  struct,
  u32,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findTreeConfigPda } from '../accounts';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type AddCanopyInstructionAccounts = {
  treeConfig?: PublicKey | Pda;
  merkleTree: PublicKey | Pda;
  treeCreatorOrDelegate?: Signer;
  logWrapper?: PublicKey | Pda;
  compressionProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type AddCanopyInstructionData = {
  discriminator: Array<number>;
  startIndex: number;
  canopyNodes: Array<Uint8Array>;
};

export type AddCanopyInstructionDataArgs = {
  startIndex: number;
  canopyNodes: Array<Uint8Array>;
};

export function getAddCanopyInstructionDataSerializer(): Serializer<
  AddCanopyInstructionDataArgs,
  AddCanopyInstructionData
> {
  return mapSerializer<
    AddCanopyInstructionDataArgs,
    any,
    AddCanopyInstructionData
  >(
    struct<AddCanopyInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['startIndex', u32()],
        ['canopyNodes', array(bytes({ size: 32 }))],
      ],
      { description: 'AddCanopyInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [247, 118, 145, 92, 84, 66, 207, 25],
    })
  ) as Serializer<AddCanopyInstructionDataArgs, AddCanopyInstructionData>;
}

// Args.
export type AddCanopyInstructionArgs = AddCanopyInstructionDataArgs;

// Instruction.
export function addCanopy(
  context: Pick<Context, 'eddsa' | 'identity' | 'programs'>,
  input: AddCanopyInstructionAccounts & AddCanopyInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplBubblegum',
    'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY'
  );

  // Accounts.
  const resolvedAccounts: ResolvedAccountsWithIndices = {
    treeConfig: {
      index: 0,
      isWritable: false,
      value: input.treeConfig ?? null,
    },
    merkleTree: { index: 1, isWritable: true, value: input.merkleTree ?? null },
    treeCreatorOrDelegate: {
      index: 2,
      isWritable: false,
      value: input.treeCreatorOrDelegate ?? null,
    },
    logWrapper: {
      index: 3,
      isWritable: false,
      value: input.logWrapper ?? null,
    },
    compressionProgram: {
      index: 4,
      isWritable: false,
      value: input.compressionProgram ?? null,
    },
    systemProgram: {
      index: 5,
      isWritable: false,
      value: input.systemProgram ?? null,
    },
  };

  // Arguments.
  const resolvedArgs: AddCanopyInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.treeConfig.value) {
    resolvedAccounts.treeConfig.value = findTreeConfigPda(context, {
      merkleTree: expectPublicKey(resolvedAccounts.merkleTree.value),
    });
  }
  if (!resolvedAccounts.treeCreatorOrDelegate.value) {
    resolvedAccounts.treeCreatorOrDelegate.value = context.identity;
  }
  if (!resolvedAccounts.logWrapper.value) {
    resolvedAccounts.logWrapper.value = context.programs.getPublicKey(
      'splNoop',
      'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV'
    );
    resolvedAccounts.logWrapper.isWritable = false;
  }
  if (!resolvedAccounts.compressionProgram.value) {
    resolvedAccounts.compressionProgram.value = context.programs.getPublicKey(
      'splAccountCompression',
      'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK'
    );
    resolvedAccounts.compressionProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getAddCanopyInstructionDataSerializer().serialize(
    resolvedArgs as AddCanopyInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
