/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type CollectV2InstructionAccounts = {
  treeConfig: PublicKey | Pda;
  destination?: PublicKey | Pda;
};

// Data.
export type CollectV2InstructionData = { discriminator: Array<number> };

export type CollectV2InstructionDataArgs = {};

export function getCollectV2InstructionDataSerializer(): Serializer<
  CollectV2InstructionDataArgs,
  CollectV2InstructionData
> {
  return mapSerializer<
    CollectV2InstructionDataArgs,
    any,
    CollectV2InstructionData
  >(
    struct<CollectV2InstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'CollectV2InstructionData' }
    ),
    (value) => ({ ...value, discriminator: [21, 11, 159, 47, 4, 195, 106, 56] })
  ) as Serializer<CollectV2InstructionDataArgs, CollectV2InstructionData>;
}

// Instruction.
export function collectV2(
  context: Pick<Context, 'programs'>,
  input: CollectV2InstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplBubblegum',
    'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY'
  );

  // Accounts.
  const resolvedAccounts: ResolvedAccountsWithIndices = {
    treeConfig: { index: 0, isWritable: true, value: input.treeConfig ?? null },
    destination: {
      index: 1,
      isWritable: true,
      value: input.destination ?? null,
    },
  };

  // Default values.
  if (!resolvedAccounts.destination.value) {
    resolvedAccounts.destination.value = publicKey(
      '2dgJVPC5fjLTBTmMvKDRig9JJUGK2Fgwr3EHShFxckhv'
    );
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getCollectV2InstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
